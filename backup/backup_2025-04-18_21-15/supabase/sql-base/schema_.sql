

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


CREATE SCHEMA IF NOT EXISTS "public";


ALTER SCHEMA "public" OWNER TO "pg_database_owner";


COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE OR REPLACE FUNCTION "public"."update_updated_at_column"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$;


ALTER FUNCTION "public"."update_updated_at_column"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."answered_questions" (
    "id" bigint NOT NULL,
    "user_id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "question_id" bigint,
    "is_correct" boolean,
    "answered_at" timestamp without time zone,
    "chapter_id" integer
);


ALTER TABLE "public"."answered_questions" OWNER TO "postgres";


ALTER TABLE "public"."answered_questions" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."answered_questions_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."answered_rewards" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "user_id" "uuid",
    "question_context_id" "uuid",
    "reward_type_id" "uuid",
    "xp_earned" integer NOT NULL,
    "coins_earned" integer NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"()
);


ALTER TABLE "public"."answered_rewards" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."case_sequence_steps" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "dispute_case_id" "uuid",
    "sequence_step_id" "uuid",
    "correct_order" integer NOT NULL,
    "parent_id" "uuid",
    "created_at" timestamp with time zone DEFAULT "now"(),
    "updated_at" timestamp with time zone DEFAULT "now"()
);


ALTER TABLE "public"."case_sequence_steps" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."cases_subquestions" (
    "id" bigint NOT NULL,
    "question_id" bigint NOT NULL,
    "statement_text" "text" NOT NULL,
    "correct_answer" "text" NOT NULL,
    "explanation" "text"
);


ALTER TABLE "public"."cases_subquestions" OWNER TO "postgres";


ALTER TABLE "public"."cases_subquestions" ALTER COLUMN "id" ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME "public"."cases_subquestions_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."chapters" (
    "id" bigint NOT NULL,
    "course_id" bigint NOT NULL,
    "name" "text"
);


ALTER TABLE "public"."chapters" OWNER TO "postgres";


ALTER TABLE "public"."chapters" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."chapters_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."courses" (
    "id" bigint NOT NULL,
    "subject_id" bigint NOT NULL,
    "name" "text"
);


ALTER TABLE "public"."courses" OWNER TO "postgres";


ALTER TABLE "public"."courses" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."courses_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."daily_streaks" (
    "user_id" "uuid" NOT NULL,
    "current_streak" integer DEFAULT 1,
    "last_active_date" "date" NOT NULL,
    "last_updated" timestamp without time zone DEFAULT "now"()
);


ALTER TABLE "public"."daily_streaks" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."dispute_answers" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "user_id" "uuid",
    "dispute_question_id" "uuid",
    "answer_text" "text" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"(),
    "updated_at" timestamp with time zone DEFAULT "now"()
);


ALTER TABLE "public"."dispute_answers" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."dispute_arguments" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "dispute_view_id" "uuid",
    "argument_text" "text" NOT NULL,
    "order" integer NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"(),
    "updated_at" timestamp with time zone DEFAULT "now"()
);


ALTER TABLE "public"."dispute_arguments" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."dispute_cases" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "title" "text" NOT NULL,
    "description" "text" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"(),
    "updated_at" timestamp with time zone DEFAULT "now"(),
    "is_active" boolean DEFAULT true,
    "chapter_id" bigint
);


ALTER TABLE "public"."dispute_cases" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."dispute_preferences" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "dispute_case_id" "uuid",
    "view_id" "uuid",
    "preference_order" integer NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"(),
    "updated_at" timestamp with time zone DEFAULT "now"()
);


ALTER TABLE "public"."dispute_preferences" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."dispute_questions" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "dispute_case_id" "uuid",
    "question_type" "text" NOT NULL,
    "question_text" "text" NOT NULL,
    "order" integer NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"(),
    "updated_at" timestamp with time zone DEFAULT "now"(),
    CONSTRAINT "dispute_questions_question_type_check" CHECK (("question_type" = ANY (ARRAY['problem'::"text", 'view'::"text", 'detail'::"text", 'argument'::"text"])))
);


ALTER TABLE "public"."dispute_questions" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."dispute_views" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "dispute_case_id" "uuid",
    "view_name" "text" NOT NULL,
    "description" "text" NOT NULL,
    "exam_relevance" "text",
    "exam_preference_order" integer,
    "order" integer NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"(),
    "updated_at" timestamp with time zone DEFAULT "now"()
);


ALTER TABLE "public"."dispute_views" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."dragdrop_groups" (
    "id" bigint NOT NULL,
    "question_id" bigint NOT NULL,
    "group_name" "text"
);


ALTER TABLE "public"."dragdrop_groups" OWNER TO "postgres";


ALTER TABLE "public"."dragdrop_groups" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."dragdrop_groups_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."dragdrop_pairs" (
    "id" bigint NOT NULL,
    "group_id" bigint NOT NULL,
    "drag_text" "text",
    "correct_match" "text"
);


ALTER TABLE "public"."dragdrop_pairs" OWNER TO "postgres";


ALTER TABLE "public"."dragdrop_pairs" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."dragdrop_pairs_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."item_usage_log" (
    "id" integer NOT NULL,
    "user_id" "uuid",
    "item_id" integer,
    "used_at" timestamp without time zone DEFAULT "now"()
);


ALTER TABLE "public"."item_usage_log" OWNER TO "postgres";


CREATE SEQUENCE IF NOT EXISTS "public"."item_usage_log_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE "public"."item_usage_log_id_seq" OWNER TO "postgres";


ALTER SEQUENCE "public"."item_usage_log_id_seq" OWNED BY "public"."item_usage_log"."id";



CREATE TABLE IF NOT EXISTS "public"."items" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "name" "text" NOT NULL,
    "description" "text",
    "price" integer NOT NULL,
    "type" "text",
    "icon_url" "text",
    CONSTRAINT "items_type_check" CHECK (("type" = ANY (ARRAY['joker'::"text", 'avatar'::"text", 'pvp_boost'::"text", 'cosmetic'::"text"])))
);


ALTER TABLE "public"."items" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."league_positions" (
    "user_id" "uuid" NOT NULL,
    "league_name" "text" NOT NULL,
    "points" bigint DEFAULT 0,
    "ranking" integer,
    "updated_at" timestamp with time zone DEFAULT "now"()
);


ALTER TABLE "public"."league_positions" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."leagues" (
    "id" bigint NOT NULL,
    "name" "text" NOT NULL,
    "league_img" "text",
    "next_league" "text",
    "previous_league" "text"
);


ALTER TABLE "public"."leagues" OWNER TO "postgres";


ALTER TABLE "public"."leagues" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."leagues_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."levels" (
    "id" integer NOT NULL,
    "level_number" integer NOT NULL,
    "xp_required" bigint NOT NULL,
    "level_image" "text",
    "level_title" "text"
);


ALTER TABLE "public"."levels" OWNER TO "postgres";


CREATE SEQUENCE IF NOT EXISTS "public"."levels_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE "public"."levels_id_seq" OWNER TO "postgres";


ALTER SEQUENCE "public"."levels_id_seq" OWNED BY "public"."levels"."id";



CREATE TABLE IF NOT EXISTS "public"."match_participants" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "match_id" "uuid" NOT NULL,
    "user_id" "uuid" NOT NULL,
    "joined_at" timestamp without time zone DEFAULT "now"(),
    "score" integer DEFAULT 0
);


ALTER TABLE "public"."match_participants" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."medals" (
    "id" "text" NOT NULL,
    "name" "text",
    "description" "text",
    "icon_url" "text"
);


ALTER TABLE "public"."medals" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."monthly_uni_scores" (
    "id" integer NOT NULL,
    "university_id" integer,
    "xp_this_month" integer DEFAULT 0 NOT NULL,
    "month_start" "date" NOT NULL,
    "month_end" "date" NOT NULL
);


ALTER TABLE "public"."monthly_uni_scores" OWNER TO "postgres";


CREATE SEQUENCE IF NOT EXISTS "public"."monthly_uni_scores_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE "public"."monthly_uni_scores_id_seq" OWNER TO "postgres";


ALTER SEQUENCE "public"."monthly_uni_scores_id_seq" OWNED BY "public"."monthly_uni_scores"."id";



CREATE TABLE IF NOT EXISTS "public"."multiple_choice_options" (
    "id" bigint NOT NULL,
    "question_id" bigint NOT NULL,
    "option_text" "text" NOT NULL,
    "is_correct" boolean NOT NULL
);


ALTER TABLE "public"."multiple_choice_options" OWNER TO "postgres";


ALTER TABLE "public"."multiple_choice_options" ALTER COLUMN "id" ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME "public"."multiple_choice_options_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."profiles" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "username" "text",
    "avatar_url" "text",
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "university" "text"
);


ALTER TABLE "public"."profiles" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."pvp_answers" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "match_id" "uuid" NOT NULL,
    "user_id" "uuid" NOT NULL,
    "question_id" bigint NOT NULL,
    "is_correct" boolean,
    "answered_at" timestamp without time zone DEFAULT "now"()
);


ALTER TABLE "public"."pvp_answers" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."pvp_matches" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp without time zone DEFAULT "now"(),
    "quiz_id" "uuid",
    "status" "text" DEFAULT 'pending'::"text",
    "mode" "text" NOT NULL,
    CONSTRAINT "pvp_matches_status_check" CHECK (("status" = ANY (ARRAY['pending'::"text", 'active'::"text", 'finished'::"text"])))
);


ALTER TABLE "public"."pvp_matches" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."pvp_participants" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "match_id" "uuid",
    "user_id" "uuid",
    "hp" integer DEFAULT 100,
    "score" integer DEFAULT 0,
    "finished" boolean DEFAULT false
);


ALTER TABLE "public"."pvp_participants" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."pvp_responses" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "match_id" "uuid" NOT NULL,
    "user_id" "uuid" NOT NULL,
    "question_id" bigint NOT NULL,
    "is_correct" boolean,
    "damage_done" integer DEFAULT 0,
    "self_damage" integer DEFAULT 0,
    "answered_at" timestamp without time zone DEFAULT "now"()
);


ALTER TABLE "public"."pvp_responses" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."question_types" (
    "id" "text" NOT NULL,
    "base_xp" integer DEFAULT 10 NOT NULL,
    "base_coins" integer DEFAULT 10 NOT NULL,
    "is_bonus" boolean DEFAULT false,
    "base_lose_coins" integer,
    "bonus_table" "text",
    "bonus_column" "text",
    "uuid_id" "uuid" DEFAULT "gen_random_uuid"(),
    "id_uuid" "uuid" DEFAULT "gen_random_uuid"() NOT NULL
);


ALTER TABLE "public"."question_types" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."questions" (
    "id" bigint NOT NULL,
    "chapter_id" bigint NOT NULL,
    "question" "text",
    "option_a" "text",
    "option_b" "text",
    "option_c" "text",
    "option_d" "text",
    "correct_answer" "text",
    "explanation" "text",
    "course_id" bigint,
    "subquestions_count" integer DEFAULT 0,
    "question_type_id" "uuid",
    CONSTRAINT "question_type_not_null" CHECK (("question_type_id" IS NOT NULL))
);


ALTER TABLE "public"."questions" OWNER TO "postgres";


ALTER TABLE "public"."questions" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."questions_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."quiz_progress" (
    "id" bigint NOT NULL,
    "user_id" "uuid" NOT NULL,
    "chapter_id" integer NOT NULL,
    "progress" integer DEFAULT 0 NOT NULL,
    "updated_at" timestamp with time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE "public"."quiz_progress" OWNER TO "postgres";


CREATE SEQUENCE IF NOT EXISTS "public"."quiz_progress_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE "public"."quiz_progress_id_seq" OWNER TO "postgres";


ALTER SEQUENCE "public"."quiz_progress_id_seq" OWNED BY "public"."quiz_progress"."id";



CREATE TABLE IF NOT EXISTS "public"."reward_types" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "question_type" "text",
    "reward_type" "text" NOT NULL,
    "base_xp" integer NOT NULL,
    "base_coins" integer NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"(),
    "updated_at" timestamp with time zone DEFAULT "now"(),
    "xp_penalty" integer DEFAULT 0 NOT NULL,
    "coin_penalty" integer DEFAULT 0 NOT NULL
);


ALTER TABLE "public"."reward_types" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."sequence_blocks" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "title" "text" NOT NULL,
    "chapter_id" bigint,
    "created_at" timestamp with time zone DEFAULT "now"()
);


ALTER TABLE "public"."sequence_blocks" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."sequence_steps" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "title" "text" NOT NULL,
    "level" integer NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"(),
    "updated_at" timestamp with time zone DEFAULT "now"(),
    "position" integer DEFAULT 1 NOT NULL,
    "block_id" "uuid"
);


ALTER TABLE "public"."sequence_steps" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."shop_avatars" (
    "id" integer NOT NULL,
    "image_url" "text" NOT NULL,
    "price" integer NOT NULL,
    "active" boolean DEFAULT true,
    "title" "text",
    "category" "text"
);


ALTER TABLE "public"."shop_avatars" OWNER TO "postgres";


CREATE SEQUENCE IF NOT EXISTS "public"."shop_avatars_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE "public"."shop_avatars_id_seq" OWNER TO "postgres";


ALTER SEQUENCE "public"."shop_avatars_id_seq" OWNED BY "public"."shop_avatars"."id";



CREATE TABLE IF NOT EXISTS "public"."subjects" (
    "id" bigint NOT NULL,
    "name" "text" NOT NULL
);


ALTER TABLE "public"."subjects" OWNER TO "postgres";


ALTER TABLE "public"."subjects" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."subjects_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."universities" (
    "id" integer NOT NULL,
    "name" "text" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"(),
    "xp_total" bigint
);


ALTER TABLE "public"."universities" OWNER TO "postgres";


CREATE SEQUENCE IF NOT EXISTS "public"."universities_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE "public"."universities_id_seq" OWNER TO "postgres";


ALTER SEQUENCE "public"."universities_id_seq" OWNED BY "public"."universities"."id";



CREATE TABLE IF NOT EXISTS "public"."user_avatars" (
    "user_id" "uuid" NOT NULL,
    "avatar_id" bigint NOT NULL,
    "created_at" timestamp without time zone DEFAULT "now"()
);


ALTER TABLE "public"."user_avatars" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."user_items" (
    "user_id" "uuid" NOT NULL,
    "is_active" boolean DEFAULT true,
    "quantity" integer DEFAULT 1,
    "acquired_at" timestamp without time zone DEFAULT "now"(),
    "item_id" "uuid"
);


ALTER TABLE "public"."user_items" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."user_medals" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "user_id" "uuid" NOT NULL,
    "quiz_id" "uuid" NOT NULL,
    "medal" "text" NOT NULL,
    "awarded_at" timestamp without time zone DEFAULT "now"(),
    CONSTRAINT "user_medals_medal_check" CHECK (("medal" = ANY (ARRAY['bronze'::"text", 'silver'::"text", 'gold'::"text"])))
);


ALTER TABLE "public"."user_medals" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."user_roles" (
    "id" "uuid" DEFAULT "extensions"."uuid_generate_v4"() NOT NULL,
    "user_id" "uuid",
    "role" "text" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"(),
    "updated_at" timestamp with time zone DEFAULT "now"(),
    CONSTRAINT "user_roles_role_check" CHECK (("role" = ANY (ARRAY['admin'::"text", 'user'::"text"])))
);


ALTER TABLE "public"."user_roles" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."user_stats" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "user_id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "total_xp" bigint,
    "total_coins" bigint,
    "level" bigint,
    "title" "text",
    "created_at" timestamp with time zone,
    "streak" integer,
    "avatar_url" "text",
    "gold_medals" integer DEFAULT 0,
    "silver_medals" integer DEFAULT 0,
    "bronze_medals" integer DEFAULT 0,
    "last_played" timestamp with time zone,
    "current_league" "text",
    "updated_at" timestamp with time zone,
    "league_group" "text",
    "username" "text",
    "questions_answered" bigint,
    "correct_answers" bigint,
    CONSTRAINT "positive_coins" CHECK (("total_coins" >= 0)),
    CONSTRAINT "positive_xp" CHECK (("total_xp" >= 0)),
    CONSTRAINT "valid_level" CHECK (("level" > 0))
);


ALTER TABLE "public"."user_stats" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."user_streaks" (
    "user_id" "uuid" NOT NULL,
    "current_streak" integer DEFAULT 0,
    "last_updated" timestamp without time zone DEFAULT "now"()
);


ALTER TABLE "public"."user_streaks" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."versions" (
    "id" integer NOT NULL,
    "table_name" character varying(255) NOT NULL,
    "data" "jsonb" NOT NULL,
    "created_at" timestamp with time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE "public"."versions" OWNER TO "postgres";


CREATE SEQUENCE IF NOT EXISTS "public"."versions_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE "public"."versions_id_seq" OWNER TO "postgres";


ALTER SEQUENCE "public"."versions_id_seq" OWNED BY "public"."versions"."id";



ALTER TABLE ONLY "public"."item_usage_log" ALTER COLUMN "id" SET DEFAULT "nextval"('"public"."item_usage_log_id_seq"'::"regclass");



ALTER TABLE ONLY "public"."levels" ALTER COLUMN "id" SET DEFAULT "nextval"('"public"."levels_id_seq"'::"regclass");



ALTER TABLE ONLY "public"."monthly_uni_scores" ALTER COLUMN "id" SET DEFAULT "nextval"('"public"."monthly_uni_scores_id_seq"'::"regclass");



ALTER TABLE ONLY "public"."quiz_progress" ALTER COLUMN "id" SET DEFAULT "nextval"('"public"."quiz_progress_id_seq"'::"regclass");



ALTER TABLE ONLY "public"."shop_avatars" ALTER COLUMN "id" SET DEFAULT "nextval"('"public"."shop_avatars_id_seq"'::"regclass");



ALTER TABLE ONLY "public"."universities" ALTER COLUMN "id" SET DEFAULT "nextval"('"public"."universities_id_seq"'::"regclass");



ALTER TABLE ONLY "public"."versions" ALTER COLUMN "id" SET DEFAULT "nextval"('"public"."versions_id_seq"'::"regclass");



ALTER TABLE ONLY "public"."answered_questions"
    ADD CONSTRAINT "answered_questions_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."answered_rewards"
    ADD CONSTRAINT "answered_rewards_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."answered_rewards"
    ADD CONSTRAINT "answered_rewards_user_id_dispute_case_id_reward_type_id_key" UNIQUE ("user_id", "question_context_id", "reward_type_id");



ALTER TABLE ONLY "public"."case_sequence_steps"
    ADD CONSTRAINT "case_sequence_steps_dispute_case_id_sequence_step_id_key" UNIQUE ("dispute_case_id", "sequence_step_id");



ALTER TABLE ONLY "public"."case_sequence_steps"
    ADD CONSTRAINT "case_sequence_steps_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."cases_subquestions"
    ADD CONSTRAINT "cases_subquestions_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."chapters"
    ADD CONSTRAINT "chapters_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."courses"
    ADD CONSTRAINT "courses_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."daily_streaks"
    ADD CONSTRAINT "daily_streaks_pkey" PRIMARY KEY ("user_id");



ALTER TABLE ONLY "public"."dispute_answers"
    ADD CONSTRAINT "dispute_answers_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."dispute_answers"
    ADD CONSTRAINT "dispute_answers_user_id_dispute_question_id_key" UNIQUE ("user_id", "dispute_question_id");



ALTER TABLE ONLY "public"."dispute_arguments"
    ADD CONSTRAINT "dispute_arguments_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."dispute_cases"
    ADD CONSTRAINT "dispute_cases_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."dispute_preferences"
    ADD CONSTRAINT "dispute_preferences_dispute_case_id_view_id_key" UNIQUE ("dispute_case_id", "view_id");



ALTER TABLE ONLY "public"."dispute_preferences"
    ADD CONSTRAINT "dispute_preferences_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."dispute_questions"
    ADD CONSTRAINT "dispute_questions_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."dispute_views"
    ADD CONSTRAINT "dispute_views_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."dragdrop_groups"
    ADD CONSTRAINT "dragdrop_groups_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."dragdrop_pairs"
    ADD CONSTRAINT "dragdrop_pairs_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."item_usage_log"
    ADD CONSTRAINT "item_usage_log_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."items"
    ADD CONSTRAINT "items_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."league_positions"
    ADD CONSTRAINT "league_positions_pkey" PRIMARY KEY ("user_id", "league_name");



ALTER TABLE ONLY "public"."leagues"
    ADD CONSTRAINT "leagues_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."levels"
    ADD CONSTRAINT "levels_level_number_key" UNIQUE ("level_number");



ALTER TABLE ONLY "public"."levels"
    ADD CONSTRAINT "levels_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."match_participants"
    ADD CONSTRAINT "match_participants_match_id_user_id_key" UNIQUE ("match_id", "user_id");



ALTER TABLE ONLY "public"."match_participants"
    ADD CONSTRAINT "match_participants_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."medals"
    ADD CONSTRAINT "medals_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."monthly_uni_scores"
    ADD CONSTRAINT "monthly_uni_scores_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."multiple_choice_options"
    ADD CONSTRAINT "multiple_choice_options_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."pvp_answers"
    ADD CONSTRAINT "pvp_answers_match_id_user_id_question_id_key" UNIQUE ("match_id", "user_id", "question_id");



ALTER TABLE ONLY "public"."pvp_answers"
    ADD CONSTRAINT "pvp_answers_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."pvp_matches"
    ADD CONSTRAINT "pvp_matches_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."pvp_participants"
    ADD CONSTRAINT "pvp_participants_match_id_user_id_key" UNIQUE ("match_id", "user_id");



ALTER TABLE ONLY "public"."pvp_participants"
    ADD CONSTRAINT "pvp_participants_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."pvp_responses"
    ADD CONSTRAINT "pvp_responses_match_id_user_id_question_id_key" UNIQUE ("match_id", "user_id", "question_id");



ALTER TABLE ONLY "public"."pvp_responses"
    ADD CONSTRAINT "pvp_responses_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."question_types"
    ADD CONSTRAINT "question_types_id_unique" UNIQUE ("id");



ALTER TABLE ONLY "public"."question_types"
    ADD CONSTRAINT "question_types_pkey_uuid" PRIMARY KEY ("id_uuid");



ALTER TABLE ONLY "public"."questions"
    ADD CONSTRAINT "questions_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."quiz_progress"
    ADD CONSTRAINT "quiz_progress_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."quiz_progress"
    ADD CONSTRAINT "quiz_progress_user_id_chapter_id_key" UNIQUE ("user_id", "chapter_id");



ALTER TABLE ONLY "public"."reward_types"
    ADD CONSTRAINT "reward_types_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."reward_types"
    ADD CONSTRAINT "reward_types_question_type_reward_type_key" UNIQUE ("question_type", "reward_type");



ALTER TABLE ONLY "public"."sequence_blocks"
    ADD CONSTRAINT "sequence_blocks_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."sequence_steps"
    ADD CONSTRAINT "sequence_steps_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."shop_avatars"
    ADD CONSTRAINT "shop_avatars_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."subjects"
    ADD CONSTRAINT "subjects_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."sequence_steps"
    ADD CONSTRAINT "unique_step_position_per_block" UNIQUE ("block_id", "position");



ALTER TABLE ONLY "public"."universities"
    ADD CONSTRAINT "universities_name_key" UNIQUE ("name");



ALTER TABLE ONLY "public"."universities"
    ADD CONSTRAINT "universities_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."user_avatars"
    ADD CONSTRAINT "user_avatars_pkey" PRIMARY KEY ("user_id", "avatar_id");



ALTER TABLE ONLY "public"."user_medals"
    ADD CONSTRAINT "user_medals_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."user_medals"
    ADD CONSTRAINT "user_medals_user_id_quiz_id_key" UNIQUE ("user_id", "quiz_id");



ALTER TABLE ONLY "public"."user_roles"
    ADD CONSTRAINT "user_roles_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."user_roles"
    ADD CONSTRAINT "user_roles_user_id_role_key" UNIQUE ("user_id", "role");



ALTER TABLE ONLY "public"."user_stats"
    ADD CONSTRAINT "user_stats_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."user_stats"
    ADD CONSTRAINT "user_stats_user_id_key" UNIQUE ("user_id");



ALTER TABLE ONLY "public"."user_streaks"
    ADD CONSTRAINT "user_streaks_pkey" PRIMARY KEY ("user_id");



ALTER TABLE ONLY "public"."versions"
    ADD CONSTRAINT "versions_pkey" PRIMARY KEY ("id");



CREATE INDEX "idx_answered_rewards_case_id" ON "public"."answered_rewards" USING "btree" ("question_context_id");



CREATE INDEX "idx_answered_rewards_type_id" ON "public"."answered_rewards" USING "btree" ("reward_type_id");



CREATE INDEX "idx_answered_rewards_user_id" ON "public"."answered_rewards" USING "btree" ("user_id");



CREATE INDEX "idx_case_sequence_steps_case_id" ON "public"."case_sequence_steps" USING "btree" ("dispute_case_id");



CREATE INDEX "idx_case_sequence_steps_step_id" ON "public"."case_sequence_steps" USING "btree" ("sequence_step_id");



CREATE INDEX "idx_dispute_answers_question_id" ON "public"."dispute_answers" USING "btree" ("dispute_question_id");



CREATE INDEX "idx_dispute_answers_user_id" ON "public"."dispute_answers" USING "btree" ("user_id");



CREATE INDEX "idx_dispute_arguments_view_id" ON "public"."dispute_arguments" USING "btree" ("dispute_view_id");



CREATE INDEX "idx_dispute_preferences_case_id" ON "public"."dispute_preferences" USING "btree" ("dispute_case_id");



CREATE INDEX "idx_dispute_questions_case_id" ON "public"."dispute_questions" USING "btree" ("dispute_case_id");



CREATE INDEX "idx_dispute_views_case_id" ON "public"."dispute_views" USING "btree" ("dispute_case_id");



CREATE INDEX "idx_questions_chapter_id" ON "public"."questions" USING "btree" ("chapter_id");



CREATE INDEX "idx_sequence_steps_position" ON "public"."sequence_steps" USING "btree" ("position");



CREATE INDEX "idx_user_stats_user_id" ON "public"."user_stats" USING "btree" ("user_id");



CREATE OR REPLACE TRIGGER "update_case_sequence_steps_updated_at" BEFORE UPDATE ON "public"."case_sequence_steps" FOR EACH ROW EXECUTE FUNCTION "public"."update_updated_at_column"();



CREATE OR REPLACE TRIGGER "update_sequence_steps_updated_at" BEFORE UPDATE ON "public"."sequence_steps" FOR EACH ROW EXECUTE FUNCTION "public"."update_updated_at_column"();



ALTER TABLE ONLY "public"."answered_questions"
    ADD CONSTRAINT "answered_questions_chapter_id_fkey" FOREIGN KEY ("chapter_id") REFERENCES "public"."chapters"("id");



ALTER TABLE ONLY "public"."answered_questions"
    ADD CONSTRAINT "answered_questions_question_id_fkey" FOREIGN KEY ("question_id") REFERENCES "public"."questions"("id");



ALTER TABLE ONLY "public"."answered_rewards"
    ADD CONSTRAINT "answered_rewards_dispute_case_id_fkey" FOREIGN KEY ("question_context_id") REFERENCES "public"."dispute_cases"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."answered_rewards"
    ADD CONSTRAINT "answered_rewards_reward_type_id_fkey" FOREIGN KEY ("reward_type_id") REFERENCES "public"."reward_types"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."answered_rewards"
    ADD CONSTRAINT "answered_rewards_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."case_sequence_steps"
    ADD CONSTRAINT "case_sequence_steps_dispute_case_id_fkey" FOREIGN KEY ("dispute_case_id") REFERENCES "public"."dispute_cases"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."case_sequence_steps"
    ADD CONSTRAINT "case_sequence_steps_parent_id_fkey" FOREIGN KEY ("parent_id") REFERENCES "public"."sequence_steps"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."case_sequence_steps"
    ADD CONSTRAINT "case_sequence_steps_sequence_step_id_fkey" FOREIGN KEY ("sequence_step_id") REFERENCES "public"."sequence_steps"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."cases_subquestions"
    ADD CONSTRAINT "cases_subquestions_question_id_fkey" FOREIGN KEY ("question_id") REFERENCES "public"."questions"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."chapters"
    ADD CONSTRAINT "chapters_course_id_fkey" FOREIGN KEY ("course_id") REFERENCES "public"."courses"("id");



ALTER TABLE ONLY "public"."courses"
    ADD CONSTRAINT "courses_subject_id_fkey" FOREIGN KEY ("subject_id") REFERENCES "public"."subjects"("id");



ALTER TABLE ONLY "public"."daily_streaks"
    ADD CONSTRAINT "daily_streaks_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."dispute_answers"
    ADD CONSTRAINT "dispute_answers_dispute_question_id_fkey" FOREIGN KEY ("dispute_question_id") REFERENCES "public"."dispute_questions"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."dispute_answers"
    ADD CONSTRAINT "dispute_answers_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."dispute_arguments"
    ADD CONSTRAINT "dispute_arguments_dispute_view_id_fkey" FOREIGN KEY ("dispute_view_id") REFERENCES "public"."dispute_views"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."dispute_cases"
    ADD CONSTRAINT "dispute_cases_chapter_id_fkey" FOREIGN KEY ("chapter_id") REFERENCES "public"."chapters"("id") ON DELETE SET NULL;



ALTER TABLE ONLY "public"."dispute_preferences"
    ADD CONSTRAINT "dispute_preferences_dispute_case_id_fkey" FOREIGN KEY ("dispute_case_id") REFERENCES "public"."dispute_cases"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."dispute_preferences"
    ADD CONSTRAINT "dispute_preferences_view_id_fkey" FOREIGN KEY ("view_id") REFERENCES "public"."dispute_views"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."dispute_questions"
    ADD CONSTRAINT "dispute_questions_dispute_case_id_fkey" FOREIGN KEY ("dispute_case_id") REFERENCES "public"."dispute_cases"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."dispute_views"
    ADD CONSTRAINT "dispute_views_dispute_case_id_fkey" FOREIGN KEY ("dispute_case_id") REFERENCES "public"."dispute_cases"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."dragdrop_groups"
    ADD CONSTRAINT "dragdrop_groups_question_id_fkey" FOREIGN KEY ("question_id") REFERENCES "public"."questions"("id");



ALTER TABLE ONLY "public"."dragdrop_pairs"
    ADD CONSTRAINT "dragdrop_pairs_group_id_fkey" FOREIGN KEY ("group_id") REFERENCES "public"."dragdrop_groups"("id");



ALTER TABLE ONLY "public"."questions"
    ADD CONSTRAINT "fk_question_type" FOREIGN KEY ("question_type_id") REFERENCES "public"."question_types"("id_uuid");



ALTER TABLE ONLY "public"."item_usage_log"
    ADD CONSTRAINT "item_usage_log_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id");



ALTER TABLE ONLY "public"."league_positions"
    ADD CONSTRAINT "league_positions_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."match_participants"
    ADD CONSTRAINT "match_participants_match_id_fkey" FOREIGN KEY ("match_id") REFERENCES "public"."pvp_matches"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."match_participants"
    ADD CONSTRAINT "match_participants_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."monthly_uni_scores"
    ADD CONSTRAINT "monthly_uni_scores_university_id_fkey" FOREIGN KEY ("university_id") REFERENCES "public"."universities"("id");



ALTER TABLE ONLY "public"."multiple_choice_options"
    ADD CONSTRAINT "multiple_choice_options_question_id_fkey" FOREIGN KEY ("question_id") REFERENCES "public"."questions"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."pvp_answers"
    ADD CONSTRAINT "pvp_answers_match_id_fkey" FOREIGN KEY ("match_id") REFERENCES "public"."pvp_matches"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."pvp_answers"
    ADD CONSTRAINT "pvp_answers_question_id_fkey" FOREIGN KEY ("question_id") REFERENCES "public"."questions"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."pvp_answers"
    ADD CONSTRAINT "pvp_answers_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."pvp_participants"
    ADD CONSTRAINT "pvp_participants_match_id_fkey" FOREIGN KEY ("match_id") REFERENCES "public"."pvp_matches"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."pvp_participants"
    ADD CONSTRAINT "pvp_participants_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."pvp_responses"
    ADD CONSTRAINT "pvp_responses_match_id_fkey" FOREIGN KEY ("match_id") REFERENCES "public"."pvp_matches"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."pvp_responses"
    ADD CONSTRAINT "pvp_responses_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."questions"
    ADD CONSTRAINT "questions_chapter_id_fkey" FOREIGN KEY ("chapter_id") REFERENCES "public"."chapters"("id");



ALTER TABLE ONLY "public"."questions"
    ADD CONSTRAINT "questions_course_id_fkey" FOREIGN KEY ("course_id") REFERENCES "public"."courses"("id");



ALTER TABLE ONLY "public"."quiz_progress"
    ADD CONSTRAINT "quiz_progress_chapter_id_fkey" FOREIGN KEY ("chapter_id") REFERENCES "public"."chapters"("id");



ALTER TABLE ONLY "public"."quiz_progress"
    ADD CONSTRAINT "quiz_progress_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "public"."reward_types"
    ADD CONSTRAINT "reward_types_question_type_fkey" FOREIGN KEY ("question_type") REFERENCES "public"."question_types"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."sequence_blocks"
    ADD CONSTRAINT "sequence_blocks_chapter_id_fkey" FOREIGN KEY ("chapter_id") REFERENCES "public"."chapters"("id") ON DELETE SET NULL;



ALTER TABLE ONLY "public"."sequence_steps"
    ADD CONSTRAINT "sequence_steps_block_id_fkey" FOREIGN KEY ("block_id") REFERENCES "public"."sequence_blocks"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."user_avatars"
    ADD CONSTRAINT "user_avatars_avatar_id_fkey" FOREIGN KEY ("avatar_id") REFERENCES "public"."shop_avatars"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."user_avatars"
    ADD CONSTRAINT "user_avatars_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."user_items"
    ADD CONSTRAINT "user_items_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id");



ALTER TABLE ONLY "public"."user_medals"
    ADD CONSTRAINT "user_medals_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."user_roles"
    ADD CONSTRAINT "user_roles_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."user_streaks"
    ADD CONSTRAINT "user_streaks_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON DELETE CASCADE;



CREATE POLICY "Arguments are viewable by everyone" ON "public"."dispute_arguments" FOR SELECT USING ((EXISTS ( SELECT 1
   FROM ("public"."dispute_views" "v"
     JOIN "public"."dispute_cases" "c" ON (("v"."dispute_case_id" = "c"."id")))
  WHERE (("v"."id" = "dispute_arguments"."dispute_view_id") AND ("c"."is_active" = true)))));



CREATE POLICY "Case sequence steps are viewable by everyone" ON "public"."case_sequence_steps" FOR SELECT USING (true);



CREATE POLICY "Dispute cases are viewable by everyone" ON "public"."dispute_cases" FOR SELECT USING (("is_active" = true));



CREATE POLICY "Enable delete for users based on user_id" ON "public"."profiles" FOR DELETE TO "authenticated" USING (("auth"."uid"() = "id"));



CREATE POLICY "Enable insert for authenticated users only" ON "public"."answered_questions" FOR INSERT TO "authenticated" WITH CHECK (("auth"."uid"() = "user_id"));



CREATE POLICY "Enable insert for authenticated users only" ON "public"."profiles" FOR INSERT TO "authenticated" WITH CHECK (("auth"."uid"() = "id"));



CREATE POLICY "Enable insert for authenticated users only" ON "public"."user_stats" FOR INSERT TO "authenticated" WITH CHECK (("auth"."uid"() = "user_id"));



CREATE POLICY "Enable read access for all users" ON "public"."answered_questions" FOR SELECT TO "authenticated" USING (("auth"."uid"() = "user_id"));



CREATE POLICY "Enable read access for all users" ON "public"."cases_subquestions" FOR SELECT USING (true);



CREATE POLICY "Enable read access for all users" ON "public"."chapters" FOR SELECT TO "anon" USING (true);



CREATE POLICY "Enable read access for all users" ON "public"."courses" FOR SELECT TO "anon" USING (true);



CREATE POLICY "Enable read access for all users" ON "public"."dragdrop_groups" FOR SELECT USING (true);



CREATE POLICY "Enable read access for all users" ON "public"."dragdrop_pairs" FOR SELECT TO "authenticated" USING (("auth"."uid"() IS NOT NULL));



CREATE POLICY "Enable read access for all users" ON "public"."leagues" FOR SELECT USING (true);



CREATE POLICY "Enable read access for all users" ON "public"."multiple_choice_options" FOR SELECT TO "authenticated" USING (("auth"."uid"() IS NOT NULL));



CREATE POLICY "Enable read access for all users" ON "public"."profiles" FOR SELECT TO "authenticated" USING (("auth"."uid"() = "id"));



CREATE POLICY "Enable read access for all users" ON "public"."questions" FOR SELECT TO "authenticated" USING (("auth"."uid"() IS NOT NULL));



CREATE POLICY "Enable read access for all users" ON "public"."subjects" FOR SELECT TO "authenticated" USING (("auth"."uid"() IS NOT NULL));



CREATE POLICY "Enable read access for all users" ON "public"."user_stats" FOR SELECT TO "authenticated" USING (("auth"."uid"() = "user_id"));



CREATE POLICY "Enable update for users based on email" ON "public"."answered_questions" FOR UPDATE TO "authenticated" USING (("auth"."uid"() = "user_id"));



CREATE POLICY "Enable update for users based on email" ON "public"."profiles" FOR UPDATE TO "authenticated" USING (("auth"."uid"() = "id")) WITH CHECK (("auth"."uid"() = "id"));



CREATE POLICY "Enable update for users based on email" ON "public"."user_stats" FOR UPDATE TO "authenticated" USING (("auth"."uid"() = "user_id"));



CREATE POLICY "For all authenticated" ON "public"."levels" FOR SELECT TO "authenticated" USING (("auth"."uid"() IS NOT NULL));



CREATE POLICY "Only admins can insert dispute cases" ON "public"."dispute_cases" FOR INSERT WITH CHECK ((("auth"."role"() = 'authenticated'::"text") AND ("auth"."uid"() IN ( SELECT "user_roles"."user_id"
   FROM "public"."user_roles"
  WHERE ("user_roles"."role" = 'admin'::"text")))));



CREATE POLICY "Only admins can manage arguments" ON "public"."dispute_arguments" USING ((("auth"."role"() = 'authenticated'::"text") AND ("auth"."uid"() IN ( SELECT "user_roles"."user_id"
   FROM "public"."user_roles"
  WHERE ("user_roles"."role" = 'admin'::"text")))));



CREATE POLICY "Only admins can manage case sequence steps" ON "public"."case_sequence_steps" USING ((("auth"."role"() = 'authenticated'::"text") AND ("auth"."uid"() IN ( SELECT "user_roles"."user_id"
   FROM "public"."user_roles"
  WHERE ("user_roles"."role" = 'admin'::"text")))));



CREATE POLICY "Only admins can manage questions" ON "public"."dispute_questions" USING ((("auth"."role"() = 'authenticated'::"text") AND ("auth"."uid"() IN ( SELECT "user_roles"."user_id"
   FROM "public"."user_roles"
  WHERE ("user_roles"."role" = 'admin'::"text")))));



CREATE POLICY "Only admins can manage reward types" ON "public"."reward_types" USING ((("auth"."role"() = 'authenticated'::"text") AND ("auth"."uid"() IN ( SELECT "user_roles"."user_id"
   FROM "public"."user_roles"
  WHERE ("user_roles"."role" = 'admin'::"text")))));



CREATE POLICY "Only admins can manage roles" ON "public"."user_roles" USING ((("auth"."role"() = 'authenticated'::"text") AND ("auth"."uid"() IN ( SELECT "user_roles_1"."user_id"
   FROM "public"."user_roles" "user_roles_1"
  WHERE ("user_roles_1"."role" = 'admin'::"text")))));



CREATE POLICY "Only admins can manage sequence steps" ON "public"."sequence_steps" USING ((("auth"."role"() = 'authenticated'::"text") AND ("auth"."uid"() IN ( SELECT "user_roles"."user_id"
   FROM "public"."user_roles"
  WHERE ("user_roles"."role" = 'admin'::"text")))));



CREATE POLICY "Only admins can manage views" ON "public"."dispute_views" USING ((("auth"."role"() = 'authenticated'::"text") AND ("auth"."uid"() IN ( SELECT "user_roles"."user_id"
   FROM "public"."user_roles"
  WHERE ("user_roles"."role" = 'admin'::"text")))));



CREATE POLICY "Only admins can update dispute cases" ON "public"."dispute_cases" FOR UPDATE USING ((("auth"."role"() = 'authenticated'::"text") AND ("auth"."uid"() IN ( SELECT "user_roles"."user_id"
   FROM "public"."user_roles"
  WHERE ("user_roles"."role" = 'admin'::"text")))));



CREATE POLICY "Only service role can insert/update/delete" ON "public"."items" TO "service_role" USING (true) WITH CHECK (true);



CREATE POLICY "Only system can insert rewards" ON "public"."answered_rewards" FOR INSERT WITH CHECK (("auth"."uid"() = "user_id"));



CREATE POLICY "Public read access to items" ON "public"."items" FOR SELECT USING (true);



CREATE POLICY "Public read access to league_positions" ON "public"."league_positions" FOR SELECT USING (true);



CREATE POLICY "Public read access to monthly_uni_scores" ON "public"."monthly_uni_scores" FOR SELECT USING (true);



CREATE POLICY "Public read access to shop_avatars" ON "public"."shop_avatars" FOR SELECT USING (true);



CREATE POLICY "Public read access to universities" ON "public"."universities" FOR SELECT USING (true);



CREATE POLICY "Questions are viewable by everyone" ON "public"."dispute_questions" FOR SELECT USING ((EXISTS ( SELECT 1
   FROM "public"."dispute_cases"
  WHERE (("dispute_cases"."id" = "dispute_questions"."dispute_case_id") AND ("dispute_cases"."is_active" = true)))));



CREATE POLICY "Reward types are viewable by everyone" ON "public"."reward_types" FOR SELECT USING (true);



CREATE POLICY "Sequence steps are viewable by everyone" ON "public"."sequence_steps" FOR SELECT USING (true);



CREATE POLICY "User can delete their own avatars" ON "public"."user_avatars" FOR DELETE USING (("auth"."uid"() = "user_id"));



CREATE POLICY "User can insert their own avatars" ON "public"."user_avatars" FOR INSERT WITH CHECK (("auth"."uid"() = "user_id"));



CREATE POLICY "User can update own league_position" ON "public"."league_positions" FOR UPDATE USING (("auth"."uid"() = "user_id")) WITH CHECK (("auth"."uid"() = "user_id"));



CREATE POLICY "User can update own profile" ON "public"."profiles" FOR UPDATE USING (("auth"."uid"() = "id")) WITH CHECK (("auth"."uid"() = "id"));



CREATE POLICY "User can update their own avatars" ON "public"."user_avatars" FOR UPDATE USING (("auth"."uid"() = "user_id")) WITH CHECK (("auth"."uid"() = "user_id"));



CREATE POLICY "User can view their own avatars" ON "public"."user_avatars" FOR SELECT USING (("auth"."uid"() = "user_id"));



CREATE POLICY "Users can insert their own answers" ON "public"."dispute_answers" FOR INSERT WITH CHECK (("auth"."uid"() = "user_id"));



CREATE POLICY "Users can manage their own preferences" ON "public"."dispute_preferences" USING (("auth"."uid"() IN ( SELECT "dispute_answers"."user_id"
   FROM "public"."dispute_answers"
  WHERE ("dispute_answers"."dispute_question_id" IN ( SELECT "dispute_questions"."id"
           FROM "public"."dispute_questions"
          WHERE ("dispute_questions"."dispute_case_id" = "dispute_preferences"."dispute_case_id"))))));



CREATE POLICY "Users can read all profiles (e.g. for Leaderboard)" ON "public"."profiles" FOR SELECT USING (true);



CREATE POLICY "Users can update their own answers" ON "public"."dispute_answers" FOR UPDATE USING (("auth"."uid"() = "user_id"));



CREATE POLICY "Users can view their own answers" ON "public"."dispute_answers" FOR SELECT USING (("auth"."uid"() = "user_id"));



CREATE POLICY "Users can view their own preferences" ON "public"."dispute_preferences" FOR SELECT USING (("auth"."uid"() IN ( SELECT "dispute_answers"."user_id"
   FROM "public"."dispute_answers"
  WHERE ("dispute_answers"."dispute_question_id" IN ( SELECT "dispute_questions"."id"
           FROM "public"."dispute_questions"
          WHERE ("dispute_questions"."dispute_case_id" = "dispute_preferences"."dispute_case_id"))))));



CREATE POLICY "Users can view their own rewards" ON "public"."answered_rewards" FOR SELECT USING (("auth"."uid"() = "user_id"));



CREATE POLICY "Users can view their own roles" ON "public"."user_roles" FOR SELECT USING (("auth"."uid"() = "user_id"));



CREATE POLICY "Views are viewable by everyone" ON "public"."dispute_views" FOR SELECT USING ((EXISTS ( SELECT 1
   FROM "public"."dispute_cases"
  WHERE (("dispute_cases"."id" = "dispute_views"."dispute_case_id") AND ("dispute_cases"."is_active" = true)))));



ALTER TABLE "public"."answered_questions" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."answered_rewards" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."case_sequence_steps" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."cases_subquestions" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."chapters" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."courses" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."daily_streaks" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."dispute_answers" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."dispute_arguments" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."dispute_cases" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."dispute_preferences" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."dispute_questions" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."dispute_views" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."dragdrop_groups" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."dragdrop_pairs" ENABLE ROW LEVEL SECURITY;


CREATE POLICY "insert_own_daily_streak" ON "public"."daily_streaks" FOR INSERT TO "authenticated" WITH CHECK (("auth"."uid"() = "user_id"));



CREATE POLICY "insert_own_medals" ON "public"."user_medals" FOR INSERT TO "authenticated" WITH CHECK (("auth"."uid"() = "user_id"));



CREATE POLICY "insert_own_pvp_answers" ON "public"."pvp_answers" FOR INSERT TO "authenticated" WITH CHECK (("auth"."uid"() = "user_id"));



CREATE POLICY "insert_own_streak" ON "public"."user_streaks" FOR INSERT TO "authenticated" WITH CHECK (("auth"."uid"() = "user_id"));



ALTER TABLE "public"."items" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."league_positions" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."leagues" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."levels" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."match_participants" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."monthly_uni_scores" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."multiple_choice_options" ENABLE ROW LEVEL SECURITY;


CREATE POLICY "own_participation" ON "public"."pvp_participants" FOR SELECT TO "authenticated" USING (("auth"."uid"() = "user_id"));



CREATE POLICY "own_responses" ON "public"."pvp_responses" FOR SELECT TO "authenticated" USING (("auth"."uid"() = "user_id"));



ALTER TABLE "public"."pvp_answers" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."pvp_matches" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."pvp_participants" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."pvp_responses" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."questions" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."reward_types" ENABLE ROW LEVEL SECURITY;


CREATE POLICY "see_own_matches" ON "public"."pvp_matches" FOR SELECT TO "authenticated" USING ((EXISTS ( SELECT 1
   FROM "public"."match_participants" "mp"
  WHERE (("mp"."match_id" = "pvp_matches"."id") AND ("mp"."user_id" = "auth"."uid"())))));



CREATE POLICY "see_own_participation" ON "public"."match_participants" FOR SELECT TO "authenticated" USING (("auth"."uid"() = "user_id"));



CREATE POLICY "see_own_pvp_answers" ON "public"."pvp_answers" FOR SELECT TO "authenticated" USING (("auth"."uid"() = "user_id"));



CREATE POLICY "select_own_answers" ON "public"."answered_questions" FOR SELECT TO "authenticated" USING (("auth"."uid"() = "user_id"));



CREATE POLICY "select_own_daily_streak" ON "public"."daily_streaks" FOR SELECT TO "authenticated" USING (("auth"."uid"() = "user_id"));



CREATE POLICY "select_own_items" ON "public"."user_items" FOR SELECT TO "authenticated" USING (("auth"."uid"() = "user_id"));



CREATE POLICY "select_own_medals" ON "public"."user_medals" FOR SELECT TO "authenticated" USING (("auth"."uid"() = "user_id"));



CREATE POLICY "select_own_streak" ON "public"."user_streaks" FOR SELECT TO "authenticated" USING (("auth"."uid"() = "user_id"));



ALTER TABLE "public"."sequence_steps" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."shop_avatars" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."subjects" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."universities" ENABLE ROW LEVEL SECURITY;


CREATE POLICY "update_own_daily_streak" ON "public"."daily_streaks" FOR UPDATE TO "authenticated" USING (("auth"."uid"() = "user_id")) WITH CHECK (("auth"."uid"() = "user_id"));



CREATE POLICY "update_own_items" ON "public"."user_items" FOR UPDATE TO "authenticated" USING (("auth"."uid"() = "user_id")) WITH CHECK (("auth"."uid"() = "user_id"));



CREATE POLICY "update_own_streak" ON "public"."user_streaks" FOR UPDATE TO "authenticated" USING (("auth"."uid"() = "user_id")) WITH CHECK (("auth"."uid"() = "user_id"));



ALTER TABLE "public"."user_avatars" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."user_items" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."user_medals" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."user_roles" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."user_stats" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."user_streaks" ENABLE ROW LEVEL SECURITY;


GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";



GRANT ALL ON FUNCTION "public"."update_updated_at_column"() TO "anon";
GRANT ALL ON FUNCTION "public"."update_updated_at_column"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."update_updated_at_column"() TO "service_role";



GRANT ALL ON TABLE "public"."answered_questions" TO "anon";
GRANT ALL ON TABLE "public"."answered_questions" TO "authenticated";
GRANT ALL ON TABLE "public"."answered_questions" TO "service_role";



GRANT ALL ON SEQUENCE "public"."answered_questions_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."answered_questions_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."answered_questions_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."answered_rewards" TO "anon";
GRANT ALL ON TABLE "public"."answered_rewards" TO "authenticated";
GRANT ALL ON TABLE "public"."answered_rewards" TO "service_role";



GRANT ALL ON TABLE "public"."case_sequence_steps" TO "anon";
GRANT ALL ON TABLE "public"."case_sequence_steps" TO "authenticated";
GRANT ALL ON TABLE "public"."case_sequence_steps" TO "service_role";



GRANT ALL ON TABLE "public"."cases_subquestions" TO "anon";
GRANT ALL ON TABLE "public"."cases_subquestions" TO "authenticated";
GRANT ALL ON TABLE "public"."cases_subquestions" TO "service_role";



GRANT ALL ON SEQUENCE "public"."cases_subquestions_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."cases_subquestions_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."cases_subquestions_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."chapters" TO "anon";
GRANT ALL ON TABLE "public"."chapters" TO "authenticated";
GRANT ALL ON TABLE "public"."chapters" TO "service_role";



GRANT ALL ON SEQUENCE "public"."chapters_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."chapters_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."chapters_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."courses" TO "anon";
GRANT ALL ON TABLE "public"."courses" TO "authenticated";
GRANT ALL ON TABLE "public"."courses" TO "service_role";



GRANT ALL ON SEQUENCE "public"."courses_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."courses_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."courses_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."daily_streaks" TO "anon";
GRANT ALL ON TABLE "public"."daily_streaks" TO "authenticated";
GRANT ALL ON TABLE "public"."daily_streaks" TO "service_role";



GRANT ALL ON TABLE "public"."dispute_answers" TO "anon";
GRANT ALL ON TABLE "public"."dispute_answers" TO "authenticated";
GRANT ALL ON TABLE "public"."dispute_answers" TO "service_role";



GRANT ALL ON TABLE "public"."dispute_arguments" TO "anon";
GRANT ALL ON TABLE "public"."dispute_arguments" TO "authenticated";
GRANT ALL ON TABLE "public"."dispute_arguments" TO "service_role";



GRANT ALL ON TABLE "public"."dispute_cases" TO "anon";
GRANT ALL ON TABLE "public"."dispute_cases" TO "authenticated";
GRANT ALL ON TABLE "public"."dispute_cases" TO "service_role";



GRANT ALL ON TABLE "public"."dispute_preferences" TO "anon";
GRANT ALL ON TABLE "public"."dispute_preferences" TO "authenticated";
GRANT ALL ON TABLE "public"."dispute_preferences" TO "service_role";



GRANT ALL ON TABLE "public"."dispute_questions" TO "anon";
GRANT ALL ON TABLE "public"."dispute_questions" TO "authenticated";
GRANT ALL ON TABLE "public"."dispute_questions" TO "service_role";



GRANT ALL ON TABLE "public"."dispute_views" TO "anon";
GRANT ALL ON TABLE "public"."dispute_views" TO "authenticated";
GRANT ALL ON TABLE "public"."dispute_views" TO "service_role";



GRANT ALL ON TABLE "public"."dragdrop_groups" TO "anon";
GRANT ALL ON TABLE "public"."dragdrop_groups" TO "authenticated";
GRANT ALL ON TABLE "public"."dragdrop_groups" TO "service_role";



GRANT ALL ON SEQUENCE "public"."dragdrop_groups_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."dragdrop_groups_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."dragdrop_groups_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."dragdrop_pairs" TO "anon";
GRANT ALL ON TABLE "public"."dragdrop_pairs" TO "authenticated";
GRANT ALL ON TABLE "public"."dragdrop_pairs" TO "service_role";



GRANT ALL ON SEQUENCE "public"."dragdrop_pairs_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."dragdrop_pairs_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."dragdrop_pairs_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."item_usage_log" TO "anon";
GRANT ALL ON TABLE "public"."item_usage_log" TO "authenticated";
GRANT ALL ON TABLE "public"."item_usage_log" TO "service_role";



GRANT ALL ON SEQUENCE "public"."item_usage_log_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."item_usage_log_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."item_usage_log_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."items" TO "anon";
GRANT ALL ON TABLE "public"."items" TO "authenticated";
GRANT ALL ON TABLE "public"."items" TO "service_role";



GRANT ALL ON TABLE "public"."league_positions" TO "anon";
GRANT ALL ON TABLE "public"."league_positions" TO "authenticated";
GRANT ALL ON TABLE "public"."league_positions" TO "service_role";



GRANT ALL ON TABLE "public"."leagues" TO "anon";
GRANT ALL ON TABLE "public"."leagues" TO "authenticated";
GRANT ALL ON TABLE "public"."leagues" TO "service_role";



GRANT ALL ON SEQUENCE "public"."leagues_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."leagues_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."leagues_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."levels" TO "anon";
GRANT ALL ON TABLE "public"."levels" TO "authenticated";
GRANT ALL ON TABLE "public"."levels" TO "service_role";



GRANT ALL ON SEQUENCE "public"."levels_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."levels_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."levels_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."match_participants" TO "anon";
GRANT ALL ON TABLE "public"."match_participants" TO "authenticated";
GRANT ALL ON TABLE "public"."match_participants" TO "service_role";



GRANT ALL ON TABLE "public"."medals" TO "anon";
GRANT ALL ON TABLE "public"."medals" TO "authenticated";
GRANT ALL ON TABLE "public"."medals" TO "service_role";



GRANT ALL ON TABLE "public"."monthly_uni_scores" TO "anon";
GRANT ALL ON TABLE "public"."monthly_uni_scores" TO "authenticated";
GRANT ALL ON TABLE "public"."monthly_uni_scores" TO "service_role";



GRANT ALL ON SEQUENCE "public"."monthly_uni_scores_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."monthly_uni_scores_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."monthly_uni_scores_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."multiple_choice_options" TO "anon";
GRANT ALL ON TABLE "public"."multiple_choice_options" TO "authenticated";
GRANT ALL ON TABLE "public"."multiple_choice_options" TO "service_role";



GRANT ALL ON SEQUENCE "public"."multiple_choice_options_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."multiple_choice_options_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."multiple_choice_options_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."profiles" TO "anon";
GRANT ALL ON TABLE "public"."profiles" TO "authenticated";
GRANT ALL ON TABLE "public"."profiles" TO "service_role";



GRANT ALL ON TABLE "public"."pvp_answers" TO "anon";
GRANT ALL ON TABLE "public"."pvp_answers" TO "authenticated";
GRANT ALL ON TABLE "public"."pvp_answers" TO "service_role";



GRANT ALL ON TABLE "public"."pvp_matches" TO "anon";
GRANT ALL ON TABLE "public"."pvp_matches" TO "authenticated";
GRANT ALL ON TABLE "public"."pvp_matches" TO "service_role";



GRANT ALL ON TABLE "public"."pvp_participants" TO "anon";
GRANT ALL ON TABLE "public"."pvp_participants" TO "authenticated";
GRANT ALL ON TABLE "public"."pvp_participants" TO "service_role";



GRANT ALL ON TABLE "public"."pvp_responses" TO "anon";
GRANT ALL ON TABLE "public"."pvp_responses" TO "authenticated";
GRANT ALL ON TABLE "public"."pvp_responses" TO "service_role";



GRANT ALL ON TABLE "public"."question_types" TO "anon";
GRANT ALL ON TABLE "public"."question_types" TO "authenticated";
GRANT ALL ON TABLE "public"."question_types" TO "service_role";



GRANT ALL ON TABLE "public"."questions" TO "anon";
GRANT ALL ON TABLE "public"."questions" TO "authenticated";
GRANT ALL ON TABLE "public"."questions" TO "service_role";



GRANT ALL ON SEQUENCE "public"."questions_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."questions_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."questions_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."quiz_progress" TO "anon";
GRANT ALL ON TABLE "public"."quiz_progress" TO "authenticated";
GRANT ALL ON TABLE "public"."quiz_progress" TO "service_role";



GRANT ALL ON SEQUENCE "public"."quiz_progress_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."quiz_progress_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."quiz_progress_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."reward_types" TO "anon";
GRANT ALL ON TABLE "public"."reward_types" TO "authenticated";
GRANT ALL ON TABLE "public"."reward_types" TO "service_role";



GRANT ALL ON TABLE "public"."sequence_blocks" TO "anon";
GRANT ALL ON TABLE "public"."sequence_blocks" TO "authenticated";
GRANT ALL ON TABLE "public"."sequence_blocks" TO "service_role";



GRANT ALL ON TABLE "public"."sequence_steps" TO "anon";
GRANT ALL ON TABLE "public"."sequence_steps" TO "authenticated";
GRANT ALL ON TABLE "public"."sequence_steps" TO "service_role";



GRANT ALL ON TABLE "public"."shop_avatars" TO "anon";
GRANT ALL ON TABLE "public"."shop_avatars" TO "authenticated";
GRANT ALL ON TABLE "public"."shop_avatars" TO "service_role";



GRANT ALL ON SEQUENCE "public"."shop_avatars_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."shop_avatars_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."shop_avatars_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."subjects" TO "anon";
GRANT ALL ON TABLE "public"."subjects" TO "authenticated";
GRANT ALL ON TABLE "public"."subjects" TO "service_role";



GRANT ALL ON SEQUENCE "public"."subjects_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."subjects_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."subjects_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."universities" TO "anon";
GRANT ALL ON TABLE "public"."universities" TO "authenticated";
GRANT ALL ON TABLE "public"."universities" TO "service_role";



GRANT ALL ON SEQUENCE "public"."universities_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."universities_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."universities_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."user_avatars" TO "anon";
GRANT ALL ON TABLE "public"."user_avatars" TO "authenticated";
GRANT ALL ON TABLE "public"."user_avatars" TO "service_role";



GRANT ALL ON TABLE "public"."user_items" TO "anon";
GRANT ALL ON TABLE "public"."user_items" TO "authenticated";
GRANT ALL ON TABLE "public"."user_items" TO "service_role";



GRANT ALL ON TABLE "public"."user_medals" TO "anon";
GRANT ALL ON TABLE "public"."user_medals" TO "authenticated";
GRANT ALL ON TABLE "public"."user_medals" TO "service_role";



GRANT ALL ON TABLE "public"."user_roles" TO "anon";
GRANT ALL ON TABLE "public"."user_roles" TO "authenticated";
GRANT ALL ON TABLE "public"."user_roles" TO "service_role";



GRANT ALL ON TABLE "public"."user_stats" TO "anon";
GRANT ALL ON TABLE "public"."user_stats" TO "authenticated";
GRANT ALL ON TABLE "public"."user_stats" TO "service_role";



GRANT ALL ON TABLE "public"."user_streaks" TO "anon";
GRANT ALL ON TABLE "public"."user_streaks" TO "authenticated";
GRANT ALL ON TABLE "public"."user_streaks" TO "service_role";



GRANT ALL ON TABLE "public"."versions" TO "anon";
GRANT ALL ON TABLE "public"."versions" TO "authenticated";
GRANT ALL ON TABLE "public"."versions" TO "service_role";



GRANT ALL ON SEQUENCE "public"."versions_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."versions_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."versions_id_seq" TO "service_role";



ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";






RESET ALL;
